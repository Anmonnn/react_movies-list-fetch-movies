{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","setMovies","_useState","useState","_useState2","_slicedToArray","input","setInput","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","isMovieShown","setIsMovieShown","_useState7","_useState8","setMovie","isError","_Fragment","onSubmit","event","query","preventDefault","fetch","concat","then","res","json","catch","Response","Error","data","Poster","Title","Plot","imdbID","normalized","finally","htmlFor","type","id","placeholder","classNames","value","onChange","target","disabled","onClick","prevMovies","find","prevMovie","JSON","stringify","_toConsumableArray","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d4867105.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, {\n  Dispatch,\n  useState,\n  SetStateAction,\n  FormEvent,\n} from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api';\nimport { MovieData } from '../../types/MovieData';\nimport { ResponseError } from '../../types/ReponseError';\nimport { Movie } from '../../types/Movie';\n\ninterface T {\n  setMovies: Dispatch<SetStateAction<Movie[]>>;\n}\n\nexport const FindMovie: React.FC<T> = ({ setMovies }) => {\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isMovieShown, setIsMovieShown] = useState(false);\n  const [movie, setMovie] = useState<Movie | null>(null);\n\n  const isError = !isLoading && movie === null && input !== '' && isMovieShown;\n\n  const normalized = (data: MovieData | ResponseError) => {\n    if ('Title' in data) {\n      const imgUrl = data.Poster\n        ? data.Poster\n        : 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\n      return {\n        title: data.Title,\n        description: data.Plot,\n        imgUrl,\n        imdbUrl: `https://www.imdb.com/title/${data.imdbID}`,\n        imdbId: data.imdbID,\n      };\n    }\n\n    return null;\n  };\n\n  const movieList = () => {\n    setMovies((prevMovies) => {\n      if (prevMovies.find(prevMovie => JSON.stringify(prevMovie)\n        === JSON.stringify(movie))) {\n        setInput('');\n\n        return prevMovies;\n      }\n\n      if (prevMovies && movie) {\n        setInput('');\n\n        return [...prevMovies, movie];\n      }\n\n      setInput('');\n\n      return prevMovies;\n    });\n    setMovie(null);\n    setInput('');\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setIsLoading(true);\n    setIsMovieShown(true);\n\n    getMovie(input).then((data) => (\n      setMovie(normalized(data))\n    )).finally(() => setIsLoading(false));\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', { 'is-danger': isError })}\n              value={input}\n              onChange={(event) => {\n                setInput(event.target.value);\n                setIsMovieShown(false);\n              }}\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={\n                classNames('button is-light', { 'is-loading': isLoading })\n              }\n              disabled={input === ''}\n            >\n              {movie !== null ? 'Search again' : 'Find a movie'}\n            </button>\n          </div>\n\n          {movie !== null && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={movieList}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie !== null && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=18772400';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie setMovies={setMovies} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}